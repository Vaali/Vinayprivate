#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Sat Sep 17 15:24:26 2016 by generateDS.py version 2.9a.
#

import sys
import getopt
import re as re_
import base64
from datetime import datetime, tzinfo, timedelta

etree_ = None
Verbose_import_ = False
(   XMLParser_import_none, XMLParser_import_lxml,
    XMLParser_import_elementtree
    ) = range(3)
XMLParser_import_library = None
try:
    # lxml
    from lxml import etree as etree_
    XMLParser_import_library = XMLParser_import_lxml
    if Verbose_import_:
        print("running with lxml.etree")
except ImportError:
    try:
        # cElementTree from Python 2.5+
        import xml.etree.cElementTree as etree_
        XMLParser_import_library = XMLParser_import_elementtree
        if Verbose_import_:
            print("running with cElementTree on Python 2.5+")
    except ImportError:
        try:
            # ElementTree from Python 2.5+
            import xml.etree.ElementTree as etree_
            XMLParser_import_library = XMLParser_import_elementtree
            if Verbose_import_:
                print("running with ElementTree on Python 2.5+")
        except ImportError:
            try:
                # normal cElementTree install
                import cElementTree as etree_
                XMLParser_import_library = XMLParser_import_elementtree
                if Verbose_import_:
                    print("running with cElementTree")
            except ImportError:
                try:
                    # normal ElementTree install
                    import elementtree.ElementTree as etree_
                    XMLParser_import_library = XMLParser_import_elementtree
                    if Verbose_import_:
                        print("running with ElementTree")
                except ImportError:
                    raise ImportError(
                        "Failed to import ElementTree from any known place")

def parsexml_(*args, **kwargs):
    if (XMLParser_import_library == XMLParser_import_lxml and
        'parser' not in kwargs):
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        kwargs['parser'] = etree_.ETCompatXMLParser()
    doc = etree_.parse(*args, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError, exp:

    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(tzinfo):
            def __init__(self, offset, name):
                self.__offset = timedelta(minutes = offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node, input_name=''):
            return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_integer_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of integers')
            return input_data
        def gds_format_float(self, input_data, input_name=''):
            return '%f' % input_data
        def gds_validate_float(self, input_data, node, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_float_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of floats')
            return input_data
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_double_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of doubles')
            return input_data
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return input_data
        def gds_validate_datetime(self, input_data, node, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = input_data.strftime('%Y-%m-%dT%H:%M:%S')
            else:
                _svalue = input_data.strftime('%Y-%m-%dT%H:%M:%S.%f')
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_parse_datetime(self, input_data, node, input_name=''):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'GMT')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime.strptime(
                        input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime.strptime(
                        input_data, '%Y-%m-%dT%H:%M:%S')
            return dt.replace(tzinfo = tz)

        def gds_validate_date(self, input_data, node, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = input_data.strftime('%Y-%m-%d')
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_parse_date(self, input_data, node, input_name=''):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'GMT')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            return datetime.strptime(input_data,
                '%Y-%m-%d').replace(tzinfo = tz)
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'utf8'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')

#
# Support/utility functions.
#

def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')

def quote_xml(inStr):
    if not inStr:
        return ''
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1

def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1

def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1

def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text

def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass

def raise_parse_error(node, msg):
    if XMLParser_import_library == XMLParser_import_lxml:
        msg = '%s (element %s/line %d)' % (
            msg, node.tag, node.sourceline, )
    else:
        msg = '%s (element %s)' % (msg, node.tag, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace, pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace, name, pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' %
                (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' %
                (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' %
                (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' %
                (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' %
                (self.name, base64.b64encode(self.value), self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n'
                % (self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n'
                % (self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s",\n' % \
                (self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container

def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#

class artist(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, artistName=None, artistId=None, artistPopularityAll=None, earliestDate=None, similarArtists=None):
        self.artistName = artistName
        self.artistId = artistId
        self.artistPopularityAll = artistPopularityAll
        self.earliestDate = earliestDate
        if similarArtists is None:
            self.similarArtists = []
        else:
            self.similarArtists = similarArtists
    def factory(*args_, **kwargs_):
        if artist.subclass:
            return artist.subclass(*args_, **kwargs_)
        else:
            return artist(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_artistName(self): return self.artistName
    def set_artistName(self, artistName): self.artistName = artistName
    def get_artistId(self): return self.artistId
    def set_artistId(self, artistId): self.artistId = artistId
    def get_artistPopularityAll(self): return self.artistPopularityAll
    def set_artistPopularityAll(self, artistPopularityAll): self.artistPopularityAll = artistPopularityAll
    def get_earliestDate(self): return self.earliestDate
    def set_earliestDate(self, earliestDate): self.earliestDate = earliestDate
    def get_similarArtists(self): return self.similarArtists
    def set_similarArtists(self, similarArtists): self.similarArtists = similarArtists
    def add_similarArtists(self, value): self.similarArtists.append(value)
    def insert_similarArtists(self, index, value): self.similarArtists[index] = value
    def hasContent_(self):
        if (
            self.artistName is not None or
            self.artistId is not None or
            self.artistPopularityAll is not None or
            self.earliestDate is not None or
            self.similarArtists
            ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='artist', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='artist')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='artist'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='artist', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.artistName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sartistName>%s</%sartistName>%s' % (namespace_, self.gds_format_string(quote_xml(self.artistName).encode(ExternalEncoding), input_name='artistName'), namespace_, eol_))
        if self.artistId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sartistId>%s</%sartistId>%s' % (namespace_, self.gds_format_integer(self.artistId, input_name='artistId'), namespace_, eol_))
        if self.artistPopularityAll is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sartistPopularityAll>%s</%sartistPopularityAll>%s' % (namespace_, self.gds_format_integer(self.artistPopularityAll, input_name='artistPopularityAll'), namespace_, eol_))
        if self.earliestDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%searliestDate>%s</%searliestDate>%s' % (namespace_, self.gds_format_string(quote_xml(self.earliestDate).encode(ExternalEncoding), input_name='earliestDate'), namespace_, eol_))
        for similarArtists_ in self.similarArtists:
            similarArtists_.export(outfile, level, namespace_, name_='similarArtists', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='artist'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.artistName is not None:
            showIndent(outfile, level)
            outfile.write('artistName=%s,\n' % quote_python(self.artistName).encode(ExternalEncoding))
        if self.artistId is not None:
            showIndent(outfile, level)
            outfile.write('artistId=%d,\n' % self.artistId)
        if self.artistPopularityAll is not None:
            showIndent(outfile, level)
            outfile.write('artistPopularityAll=%d,\n' % self.artistPopularityAll)
        if self.earliestDate is not None:
            showIndent(outfile, level)
            outfile.write('earliestDate=%s,\n' % quote_python(self.earliestDate).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('similarArtists=[\n')
        level += 1
        for similarArtists_ in self.similarArtists:
            showIndent(outfile, level)
            outfile.write('model_.similarArtists(\n')
            similarArtists_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'artistName':
            artistName_ = child_.text
            artistName_ = self.gds_validate_string(artistName_, node, 'artistName')
            self.artistName = artistName_
        elif nodeName_ == 'artistId':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'artistId')
            self.artistId = ival_
        elif nodeName_ == 'artistPopularityAll':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'artistPopularityAll')
            self.artistPopularityAll = ival_
        elif nodeName_ == 'earliestDate':
            earliestDate_ = child_.text
            earliestDate_ = self.gds_validate_string(earliestDate_, node, 'earliestDate')
            self.earliestDate = earliestDate_
        elif nodeName_ == 'similarArtists':
            obj_ = similarArtists.factory()
            obj_.build(child_)
            self.similarArtists.append(obj_)
# end class artist


class similarArtists(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, artistName=None, artistId=None, artistPopularityAll=None, earliestDate=None, cosineDistance=None, euclideanDistance=None, pearsonDistance=None):
        self.artistName = artistName
        self.artistId = artistId
        self.artistPopularityAll = artistPopularityAll
        self.earliestDate = earliestDate
        self.cosineDistance = cosineDistance
        self.euclideanDistance = euclideanDistance
        self.pearsonDistance = pearsonDistance
    def factory(*args_, **kwargs_):
        if similarArtists.subclass:
            return similarArtists.subclass(*args_, **kwargs_)
        else:
            return similarArtists(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_artistName(self): return self.artistName
    def set_artistName(self, artistName): self.artistName = artistName
    def get_artistId(self): return self.artistId
    def set_artistId(self, artistId): self.artistId = artistId
    def get_artistPopularityAll(self): return self.artistPopularityAll
    def set_artistPopularityAll(self, artistPopularityAll): self.artistPopularityAll = artistPopularityAll
    def get_earliestDate(self): return self.earliestDate
    def set_earliestDate(self, earliestDate): self.earliestDate = earliestDate
    def get_cosineDistance(self): return self.cosineDistance
    def set_cosineDistance(self, cosineDistance): self.cosineDistance = cosineDistance
    def get_euclideanDistance(self): return self.euclideanDistance
    def set_euclideanDistance(self, euclideanDistance): self.euclideanDistance = euclideanDistance
    def get_pearsonDistance(self): return self.pearsonDistance
    def set_pearsonDistance(self, pearsonDistance): self.pearsonDistance = pearsonDistance
    def hasContent_(self):
        if (
            self.artistName is not None or
            self.artistId is not None or
            self.artistPopularityAll is not None or
            self.earliestDate is not None or
            self.cosineDistance is not None or
            self.euclideanDistance is not None or
            self.pearsonDistance is not None
            ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='similarArtists', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='similarArtists')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='similarArtists'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='similarArtists', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.artistName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sartistName>%s</%sartistName>%s' % (namespace_, self.gds_format_string(quote_xml(self.artistName).encode(ExternalEncoding), input_name='artistName'), namespace_, eol_))
        if self.artistId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sartistId>%s</%sartistId>%s' % (namespace_, self.gds_format_integer(self.artistId, input_name='artistId'), namespace_, eol_))
        if self.artistPopularityAll is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sartistPopularityAll>%s</%sartistPopularityAll>%s' % (namespace_, self.gds_format_integer(self.artistPopularityAll, input_name='artistPopularityAll'), namespace_, eol_))
        if self.earliestDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%searliestDate>%s</%searliestDate>%s' % (namespace_, self.gds_format_string(quote_xml(self.earliestDate).encode(ExternalEncoding), input_name='earliestDate'), namespace_, eol_))
        if self.cosineDistance is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scosineDistance>%s</%scosineDistance>%s' % (namespace_, self.gds_format_float(self.cosineDistance, input_name='cosineDistance'), namespace_, eol_))
        if self.euclideanDistance is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%seuclideanDistance>%s</%seuclideanDistance>%s' % (namespace_, self.gds_format_float(self.euclideanDistance, input_name='euclideanDistance'), namespace_, eol_))
        if self.pearsonDistance is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spearsonDistance>%s</%spearsonDistance>%s' % (namespace_, self.gds_format_float(self.pearsonDistance, input_name='pearsonDistance'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='similarArtists'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.artistName is not None:
            showIndent(outfile, level)
            outfile.write('artistName=%s,\n' % quote_python(self.artistName).encode(ExternalEncoding))
        if self.artistId is not None:
            showIndent(outfile, level)
            outfile.write('artistId=%d,\n' % self.artistId)
        if self.artistPopularityAll is not None:
            showIndent(outfile, level)
            outfile.write('artistPopularityAll=%d,\n' % self.artistPopularityAll)
        if self.earliestDate is not None:
            showIndent(outfile, level)
            outfile.write('earliestDate=%s,\n' % quote_python(self.earliestDate).encode(ExternalEncoding))
        if self.cosineDistance is not None:
            showIndent(outfile, level)
            outfile.write('cosineDistance=%f,\n' % self.cosineDistance)
        if self.euclideanDistance is not None:
            showIndent(outfile, level)
            outfile.write('euclideanDistance=%f,\n' % self.euclideanDistance)
        if self.pearsonDistance is not None:
            showIndent(outfile, level)
            outfile.write('pearsonDistance=%f,\n' % self.pearsonDistance)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'artistName':
            artistName_ = child_.text
            artistName_ = self.gds_validate_string(artistName_, node, 'artistName')
            self.artistName = artistName_
        elif nodeName_ == 'artistId':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'artistId')
            self.artistId = ival_
        elif nodeName_ == 'artistPopularityAll':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'artistPopularityAll')
            self.artistPopularityAll = ival_
        elif nodeName_ == 'earliestDate':
            earliestDate_ = child_.text
            earliestDate_ = self.gds_validate_string(earliestDate_, node, 'earliestDate')
            self.earliestDate = earliestDate_
        elif nodeName_ == 'cosineDistance':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'cosineDistance')
            self.cosineDistance = fval_
        elif nodeName_ == 'euclideanDistance':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'euclideanDistance')
            self.euclideanDistance = fval_
        elif nodeName_ == 'pearsonDistance':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'pearsonDistance')
            self.pearsonDistance = fval_
# end class similarArtists


class song(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, songName=None, songId=None, songPopularityAll=None, earliestDate=None, artistName=None, artistId=None, similarSongs=None):
        self.songName = songName
        self.songId = songId
        self.songPopularityAll = songPopularityAll
        self.earliestDate = earliestDate
        self.artistName = artistName
        self.artistId = artistId
        if similarSongs is None:
            self.similarSongs = []
        else:
            self.similarSongs = similarSongs
    def factory(*args_, **kwargs_):
        if song.subclass:
            return song.subclass(*args_, **kwargs_)
        else:
            return song(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_songName(self): return self.songName
    def set_songName(self, songName): self.songName = songName
    def get_songId(self): return self.songId
    def set_songId(self, songId): self.songId = songId
    def get_songPopularityAll(self): return self.songPopularityAll
    def set_songPopularityAll(self, songPopularityAll): self.songPopularityAll = songPopularityAll
    def get_earliestDate(self): return self.earliestDate
    def set_earliestDate(self, earliestDate): self.earliestDate = earliestDate
    def get_artistName(self): return self.artistName
    def set_artistName(self, artistName): self.artistName = artistName
    def get_artistId(self): return self.artistId
    def set_artistId(self, artistId): self.artistId = artistId
    def get_similarSongs(self): return self.similarSongs
    def set_similarSongs(self, similarSongs): self.similarSongs = similarSongs
    def add_similarSongs(self, value): self.similarSongs.append(value)
    def insert_similarSongs(self, index, value): self.similarSongs[index] = value
    def hasContent_(self):
        if (
            self.songName is not None or
            self.songId is not None or
            self.songPopularityAll is not None or
            self.earliestDate is not None or
            self.artistName is not None or
            self.artistId is not None or
            self.similarSongs
            ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='song', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='song')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='song'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='song', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.songName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssongName>%s</%ssongName>%s' % (namespace_, self.gds_format_string(quote_xml(self.songName).encode(ExternalEncoding), input_name='songName'), namespace_, eol_))
        if self.songId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssongId>%s</%ssongId>%s' % (namespace_, self.gds_format_string(quote_xml(self.songId).encode(ExternalEncoding), input_name='songId'), namespace_, eol_))
        if self.songPopularityAll is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssongPopularityAll>%s</%ssongPopularityAll>%s' % (namespace_, self.gds_format_integer(self.songPopularityAll, input_name='songPopularityAll'), namespace_, eol_))
        if self.earliestDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%searliestDate>%s</%searliestDate>%s' % (namespace_, self.gds_format_string(quote_xml(self.earliestDate).encode(ExternalEncoding), input_name='earliestDate'), namespace_, eol_))
        if self.artistName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sartistName>%s</%sartistName>%s' % (namespace_, self.gds_format_string(quote_xml(self.artistName).encode(ExternalEncoding), input_name='artistName'), namespace_, eol_))
        if self.artistId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sartistId>%s</%sartistId>%s' % (namespace_, self.gds_format_integer(self.artistId, input_name='artistId'), namespace_, eol_))
        for similarSongs_ in self.similarSongs:
            similarSongs_.export(outfile, level, namespace_, name_='similarSongs', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='song'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.songName is not None:
            showIndent(outfile, level)
            outfile.write('songName=%s,\n' % quote_python(self.songName).encode(ExternalEncoding))
        if self.songId is not None:
            showIndent(outfile, level)
            outfile.write('songId=%s,\n' % quote_python(self.songId).encode(ExternalEncoding))
        if self.songPopularityAll is not None:
            showIndent(outfile, level)
            outfile.write('songPopularityAll=%d,\n' % self.songPopularityAll)
        if self.earliestDate is not None:
            showIndent(outfile, level)
            outfile.write('earliestDate=%s,\n' % quote_python(self.earliestDate).encode(ExternalEncoding))
        if self.artistName is not None:
            showIndent(outfile, level)
            outfile.write('artistName=%s,\n' % quote_python(self.artistName).encode(ExternalEncoding))
        if self.artistId is not None:
            showIndent(outfile, level)
            outfile.write('artistId=%d,\n' % self.artistId)
        showIndent(outfile, level)
        outfile.write('similarSongs=[\n')
        level += 1
        for similarSongs_ in self.similarSongs:
            showIndent(outfile, level)
            outfile.write('model_.similarSongs(\n')
            similarSongs_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'songName':
            songName_ = child_.text
            songName_ = self.gds_validate_string(songName_, node, 'songName')
            self.songName = songName_
        elif nodeName_ == 'songId':
            songId_ = child_.text
            songId_ = self.gds_validate_string(songId_, node, 'songId')
            self.songId = songId_
        elif nodeName_ == 'songPopularityAll':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'songPopularityAll')
            self.songPopularityAll = ival_
        elif nodeName_ == 'earliestDate':
            earliestDate_ = child_.text
            earliestDate_ = self.gds_validate_string(earliestDate_, node, 'earliestDate')
            self.earliestDate = earliestDate_
        elif nodeName_ == 'artistName':
            artistName_ = child_.text
            artistName_ = self.gds_validate_string(artistName_, node, 'artistName')
            self.artistName = artistName_
        elif nodeName_ == 'artistId':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'artistId')
            self.artistId = ival_
        elif nodeName_ == 'similarSongs':
            obj_ = similarSongs.factory()
            obj_.build(child_)
            self.similarSongs.append(obj_)
# end class song


class similarSongs(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, songName=None, songId=None, songPopularityAll=None, earliestDate=None, cosineDistance=None, euclideanDistance=None, pearsonDistance=None, artistName=None, artistId=None):
        self.songName = songName
        self.songId = songId
        self.songPopularityAll = songPopularityAll
        self.earliestDate = earliestDate
        self.cosineDistance = cosineDistance
        self.euclideanDistance = euclideanDistance
        self.pearsonDistance = pearsonDistance
        self.artistName = artistName
        self.artistId = artistId
    def factory(*args_, **kwargs_):
        if similarSongs.subclass:
            return similarSongs.subclass(*args_, **kwargs_)
        else:
            return similarSongs(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_songName(self): return self.songName
    def set_songName(self, songName): self.songName = songName
    def get_songId(self): return self.songId
    def set_songId(self, songId): self.songId = songId
    def get_songPopularityAll(self): return self.songPopularityAll
    def set_songPopularityAll(self, songPopularityAll): self.songPopularityAll = songPopularityAll
    def get_earliestDate(self): return self.earliestDate
    def set_earliestDate(self, earliestDate): self.earliestDate = earliestDate
    def get_cosineDistance(self): return self.cosineDistance
    def set_cosineDistance(self, cosineDistance): self.cosineDistance = cosineDistance
    def get_euclideanDistance(self): return self.euclideanDistance
    def set_euclideanDistance(self, euclideanDistance): self.euclideanDistance = euclideanDistance
    def get_pearsonDistance(self): return self.pearsonDistance
    def set_pearsonDistance(self, pearsonDistance): self.pearsonDistance = pearsonDistance
    def get_artistName(self): return self.artistName
    def set_artistName(self, artistName): self.artistName = artistName
    def get_artistId(self): return self.artistId
    def set_artistId(self, artistId): self.artistId = artistId
    def hasContent_(self):
        if (
            self.songName is not None or
            self.songId is not None or
            self.songPopularityAll is not None or
            self.earliestDate is not None or
            self.cosineDistance is not None or
            self.euclideanDistance is not None or
            self.pearsonDistance is not None or
            self.artistName is not None or
            self.artistId is not None
            ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='similarSongs', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='similarSongs')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='similarSongs'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='similarSongs', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.songName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssongName>%s</%ssongName>%s' % (namespace_, self.gds_format_string(quote_xml(self.songName).encode(ExternalEncoding), input_name='songName'), namespace_, eol_))
        if self.songId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssongId>%s</%ssongId>%s' % (namespace_, self.gds_format_string(quote_xml(self.songId).encode(ExternalEncoding), input_name='songId'), namespace_, eol_))
        if self.songPopularityAll is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssongPopularityAll>%s</%ssongPopularityAll>%s' % (namespace_, self.gds_format_integer(self.songPopularityAll, input_name='songPopularityAll'), namespace_, eol_))
        if self.earliestDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%searliestDate>%s</%searliestDate>%s' % (namespace_, self.gds_format_string(quote_xml(self.earliestDate).encode(ExternalEncoding), input_name='earliestDate'), namespace_, eol_))
        if self.cosineDistance is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scosineDistance>%s</%scosineDistance>%s' % (namespace_, self.gds_format_float(self.cosineDistance, input_name='cosineDistance'), namespace_, eol_))
        if self.euclideanDistance is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%seuclideanDistance>%s</%seuclideanDistance>%s' % (namespace_, self.gds_format_float(self.euclideanDistance, input_name='euclideanDistance'), namespace_, eol_))
        if self.pearsonDistance is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spearsonDistance>%s</%spearsonDistance>%s' % (namespace_, self.gds_format_float(self.pearsonDistance, input_name='pearsonDistance'), namespace_, eol_))
        if self.artistName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sartistName>%s</%sartistName>%s' % (namespace_, self.gds_format_string(quote_xml(self.artistName).encode(ExternalEncoding), input_name='artistName'), namespace_, eol_))
        if self.artistId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sartistId>%s</%sartistId>%s' % (namespace_, self.gds_format_integer(self.artistId, input_name='artistId'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='similarSongs'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.songName is not None:
            showIndent(outfile, level)
            outfile.write('songName=%s,\n' % quote_python(self.songName).encode(ExternalEncoding))
        if self.songId is not None:
            showIndent(outfile, level)
            outfile.write('songId=%s,\n' % quote_python(self.songId).encode(ExternalEncoding))
        if self.songPopularityAll is not None:
            showIndent(outfile, level)
            outfile.write('songPopularityAll=%d,\n' % self.songPopularityAll)
        if self.earliestDate is not None:
            showIndent(outfile, level)
            outfile.write('earliestDate=%s,\n' % quote_python(self.earliestDate).encode(ExternalEncoding))
        if self.cosineDistance is not None:
            showIndent(outfile, level)
            outfile.write('cosineDistance=%f,\n' % self.cosineDistance)
        if self.euclideanDistance is not None:
            showIndent(outfile, level)
            outfile.write('euclideanDistance=%f,\n' % self.euclideanDistance)
        if self.pearsonDistance is not None:
            showIndent(outfile, level)
            outfile.write('pearsonDistance=%f,\n' % self.pearsonDistance)
        if self.artistName is not None:
            showIndent(outfile, level)
            outfile.write('artistName=%s,\n' % quote_python(self.artistName).encode(ExternalEncoding))
        if self.artistId is not None:
            showIndent(outfile, level)
            outfile.write('artistId=%d,\n' % self.artistId)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'songName':
            songName_ = child_.text
            songName_ = self.gds_validate_string(songName_, node, 'songName')
            self.songName = songName_
        elif nodeName_ == 'songId':
            songId_ = child_.text
            songId_ = self.gds_validate_string(songId_, node, 'songId')
            self.songId = songId_
        elif nodeName_ == 'songPopularityAll':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'songPopularityAll')
            self.songPopularityAll = ival_
        elif nodeName_ == 'earliestDate':
            earliestDate_ = child_.text
            earliestDate_ = self.gds_validate_string(earliestDate_, node, 'earliestDate')
            self.earliestDate = earliestDate_
        elif nodeName_ == 'cosineDistance':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'cosineDistance')
            self.cosineDistance = fval_
        elif nodeName_ == 'euclideanDistance':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'euclideanDistance')
            self.euclideanDistance = fval_
        elif nodeName_ == 'pearsonDistance':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'pearsonDistance')
            self.pearsonDistance = fval_
        elif nodeName_ == 'artistName':
            artistName_ = child_.text
            artistName_ = self.gds_validate_string(artistName_, node, 'artistName')
            self.artistName = artistName_
        elif nodeName_ == 'artistId':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'artistId')
            self.artistId = ival_
# end class similarSongs


GDSClassesMapping = {
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""

def usage():
    print USAGE_TEXT
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'artist'
        rootClass = artist
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    '''sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_=rootTag,
        namespacedef_='',
        pretty_print=True)'''
    return rootObj


def parseEtree(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'artist'
        rootClass = artist
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    rootElement = rootObj.to_etree(None, name_=rootTag)
    content = etree_.tostring(rootElement, pretty_print=True,
        xml_declaration=True, encoding="utf-8")
    sys.stdout.write(content)
    sys.stdout.write('\n')
    return rootObj, rootElement


def parseString(inString):
    from StringIO import StringIO
    doc = parsexml_(StringIO(inString))
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'artist'
        rootClass = artist
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_="artist",
        namespacedef_='')
    return rootObj


def parseLiteral(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'artist'
        rootClass = artist
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('#from similar_artists_api import *\n\n')
    sys.stdout.write('from datetime import datetime as datetime_\n\n')
    sys.stdout.write('import similar_artists_api as model_\n\n')
    sys.stdout.write('rootObj = model_.rootTag(\n')
    rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
    sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "artist",
    "similarArtists",
    "similarSongs",
    "song"
    ]
